package net.jargneau.kotamingmod.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import net.jargneau.kotamingmod.Main;
import net.minecraft.server.command.ServerCommandSource;
import net.minecraft.text.LiteralText;
import net.minecraft.text.TranslatableText;

import static com.mojang.brigadier.arguments.IntegerArgumentType.getInteger;
import static com.mojang.brigadier.arguments.IntegerArgumentType.integer;
import static net.minecraft.server.command.CommandManager.*;

public class ConfigCommand {

    public static void register(CommandDispatcher<ServerCommandSource> dispatcher) {
        LiteralArgumentBuilder<ServerCommandSource> literalargumentbuilder = literal("config")
                .requires((source) -> source.hasPermissionLevel(4))
                .then(literal("getInt")
                        .then(literal("basePlayerTorpor")
                                .executes((c) -> getInt(c.getSource(), "basePlayerTorpor")))
                        .then(literal("baseChickenTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseChickenTorpor")))
                        .then(literal("baseCowTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseCowTorpor")))
                        .then(literal("baseDonkeyTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseDonkeyTorpor")))
                        .then(literal("baseFoxTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseFoxTorpor")))
                        .then(literal("baseHorseTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseHorseTorpor")))
                        .then(literal("baseMooshroomTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseMooshroomTorpor")))
                        .then(literal("baseMuleTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseMuleTorpor")))
                        .then(literal("baseOcelotTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseOcelotTorpor")))
                        .then(literal("baseParrotTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseParrotTorpor")))
                        .then(literal("basePigTorpor")
                                .executes((c) -> getInt(c.getSource(), "basePigTorpor")))
                        .then(literal("basePolarBearTorpor")
                                .executes((c) -> getInt(c.getSource(), "basePolarBearTorpor")))
                        .then(literal("baseRabbitTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseRabbitTorpor")))
                        .then(literal("baseSheepTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseSheepTorpor")))
                        .then(literal("baseLlamaTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseLlamaTorpor")))
                        .then(literal("baseWolfTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseWolfTorpor")))
                        .then(literal("baseBatTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseBatTorpor")))
                        .then(literal("baseFishTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseFishTorpor")))
                        .then(literal("baseSnowGolemTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseSnowGolemTorpor")))
                        .then(literal("baseIronGolemTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseIronGolemTorpor")))
                        .then(literal("baseSquidTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseSquidTorpor")))
                        .then(literal("baseStriderTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseStriderTorpor")))
                        .then(literal("baseTurtleTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseTurtleTorpor")))
                        .then(literal("baseVillagerTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseVillagerTorpor")))
                        .then(literal("baseIllagerTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseIllagerTorpor")))
                        .then(literal("baseBeeTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseBeeTorpor")))
                        .then(literal("baseSpiderTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseSpiderTorpor")))
                        .then(literal("baseCaveSpiderTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseCaveSpiderTorpor")))
                        .then(literal("baseDolphinTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseDolphinTorpor")))
                        .then(literal("baseEndermanTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseEndermanTorpor")))
                        .then(literal("basePandaTorpor")
                                .executes((c) -> getInt(c.getSource(), "basePandaTorpor")))
                        .then(literal("baseZombifiedPiglinTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseZombifiedPiglinTorpor")))
                        .then(literal("basePiglinTorpor")
                                .executes((c) -> getInt(c.getSource(), "basePiglinTorpor")))
                        .then(literal("baseBlazeTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseBlazeTorpor")))
                        .then(literal("baseCreeperTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseCreeperTorpor")))
                        .then(literal("baseDrownedTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseDrownedTorpor")))
                        .then(literal("baseZombieTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseZombieTorpor")))
                        .then(literal("baseElderGuardianTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseElderGuardianTorpor")))
                        .then(literal("baseGuardianTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseGuardianTorpor")))
                        .then(literal("baseEndermiteTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseEndermiteTorpor")))
                        .then(literal("baseSilverfishTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseSilverfishTorpor")))
                        .then(literal("baseGhastTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseGhastTorpor")))
                        .then(literal("baseHoglinTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseHoglinTorpor")))
                        .then(literal("baseZoglinTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseZoglinTorpor")))
                        .then(literal("baseSlimeTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseSlimeTorpor")))
                        .then(literal("baseMagmaCubeTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseMagmaCubeTorpor")))
                        .then(literal("basePhantomTorpor")
                                .executes((c) -> getInt(c.getSource(), "basePhantomTorpor")))
                        .then(literal("basePiglinBruteTorpor")
                                .executes((c) -> getInt(c.getSource(), "basePiglinBruteTorpor")))
                        .then(literal("baseRavagerTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseRavagerTorpor")))
                        .then(literal("baseShulkerTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseShulkerTorpor")))
                        .then(literal("baseSkeletonTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseSkeletonTorpor")))
                        .then(literal("baseWitherSkeletonTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseWitherSkeletonTorpor")))
                        .then(literal("baseVexTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseVexTorpor")))
                        .then(literal("baseWitchTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseWitchTorpor")))
                        .then(literal("baseHuskTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseHuskTorpor")))
                        .then(literal("baseStrayTorpor")
                                .executes((c) -> getInt(c.getSource(), "baseStrayTorpor"))))
                .then(literal("setInt")
                        .then(literal("basePlayerTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "basePlayerTorpor", getInteger(c, "value")))))
                        .then(literal("baseChickenTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseChickenTorpor", getInteger(c, "value")))))
                        .then(literal("baseCowTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseCowTorpor", getInteger(c, "value")))))
                        .then(literal("baseDonkeyTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseDonkeyTorpor", getInteger(c, "value")))))
                        .then(literal("baseFoxTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseFoxTorpor", getInteger(c, "value")))))
                        .then(literal("baseHorseTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseHorseTorpor", getInteger(c, "value")))))
                        .then(literal("baseMooshroomTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseMooshroomTorpor", getInteger(c, "value")))))
                        .then(literal("baseMuleTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseMuleTorpor", getInteger(c, "value")))))
                        .then(literal("baseOcelotTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseOcelotTorpor", getInteger(c, "value")))))
                        .then(literal("baseParrotTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseParrotTorpor", getInteger(c, "value")))))
                        .then(literal("basePigTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "basePigTorpor", getInteger(c, "value")))))
                        .then(literal("basePolarBearTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "basePolarBearTorpor", getInteger(c, "value")))))
                        .then(literal("baseRabbitTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseRabbitTorpor", getInteger(c, "value")))))
                        .then(literal("baseSheepTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseSheepTorpor", getInteger(c, "value")))))
                        .then(literal("baseLlamaTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseLlamaTorpor", getInteger(c, "value")))))
                        .then(literal("baseWolfTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseWolfTorpor", getInteger(c, "value")))))
                        .then(literal("baseBatTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseBatTorpor", getInteger(c, "value")))))
                        .then(literal("baseFishTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseFishTorpor", getInteger(c, "value")))))
                        .then(literal("baseSnowGolemTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseSnowGolemTorpor", getInteger(c, "value")))))
                        .then(literal("baseIronGolemTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseIronGolemTorpor", getInteger(c, "value")))))
                        .then(literal("baseSquidTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseSquidTorpor", getInteger(c, "value")))))
                        .then(literal("baseStriderTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseStriderTorpor", getInteger(c, "value")))))
                        .then(literal("baseTurtleTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseTurtleTorpor", getInteger(c, "value")))))
                        .then(literal("baseVillagerTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseVillagerTorpor", getInteger(c, "value")))))
                        .then(literal("baseIllagerTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseIllagerTorpor", getInteger(c, "value")))))
                        .then(literal("baseBeeTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseBeeTorpor", getInteger(c, "value")))))
                        .then(literal("baseSpiderTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseSpiderTorpor", getInteger(c, "value")))))
                        .then(literal("baseCaveSpiderTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseCaveSpiderTorpor", getInteger(c, "value")))))
                        .then(literal("baseDolphinTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseDolphinTorpor", getInteger(c, "value")))))
                        .then(literal("baseEndermanTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseEndermanTorpor", getInteger(c, "value")))))
                        .then(literal("basePandaTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "basePandaTorpor", getInteger(c, "value")))))
                        .then(literal("baseZombifiedPiglinTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseZombifiedPiglinTorpor", getInteger(c, "value")))))
                        .then(literal("basePiglinTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "basePiglinTorpor", getInteger(c, "value")))))
                        .then(literal("baseBlazeTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseBlazeTorpor", getInteger(c, "value")))))
                        .then(literal("baseCreeperTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseCreeperTorpor", getInteger(c, "value")))))
                        .then(literal("baseDrownedTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseDrownedTorpor", getInteger(c, "value")))))
                        .then(literal("baseZombieTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseZombieTorpor", getInteger(c, "value")))))
                        .then(literal("baseElderGuardianTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseElderGuardianTorpor", getInteger(c, "value")))))
                        .then(literal("baseGuardianTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseGuardianTorpor", getInteger(c, "value")))))
                        .then(literal("baseEndermiteTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseEndermiteTorpor", getInteger(c, "value")))))
                        .then(literal("baseSilverfishTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseSilverfishTorpor", getInteger(c, "value")))))
                        .then(literal("baseGhastTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseGhastTorpor", getInteger(c, "value")))))
                        .then(literal("baseHoglinTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseHoglinTorpor", getInteger(c, "value")))))
                        .then(literal("baseZoglinTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseZoglinTorpor", getInteger(c, "value")))))
                        .then(literal("baseSlimeTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseSlimeTorpor", getInteger(c, "value")))))
                        .then(literal("baseMagmaCubeTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseMagmaCubeTorpor", getInteger(c, "value")))))
                        .then(literal("basePhantomTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "basePhantomTorpor", getInteger(c, "value")))))
                        .then(literal("basePiglinBruteTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "basePiglinBruteTorpor", getInteger(c, "value")))))
                        .then(literal("baseRavagerTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseRavagerTorpor", getInteger(c, "value")))))
                        .then(literal("baseShulkerTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseShulkerTorpor", getInteger(c, "value")))))
                        .then(literal("baseSkeletonTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseSkeletonTorpor", getInteger(c, "value")))))
                        .then(literal("baseWitherSkeletonTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseWitherSkeletonTorpor", getInteger(c, "value")))))
                        .then(literal("baseVexTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseVexTorpor", getInteger(c, "value")))))
                        .then(literal("baseHuskTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseHuskTorpor", getInteger(c, "value")))))
                        .then(literal("baseStrayTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseStrayTorpor", getInteger(c, "value")))))
                        .then(literal("baseWitchTorpor")
                                .then(argument("value", integer())
                                        .executes((c) -> setInt(c.getSource(), "baseWitchTorpor", getInteger(c, "value"))))));

                        dispatcher.register(literalargumentbuilder);
    }

    private static int getInt(ServerCommandSource source, String key) {
        Object value = Main.getConfig().getField(key);

        if(!(value instanceof Integer) || (int) value == -1) {
            source.sendFeedback(new TranslatableText("command.getint.failed"), false);
            return -1;
        }

        source.sendFeedback(new LiteralText(key + " : " + value.toString()), false);
        return 1;
    }

    private static int setInt(ServerCommandSource source, String key, int value) {
        int result = Main.getConfig().setField(key, value);

        if(result == -1) {
            source.sendFeedback(new TranslatableText("command.setint.failed"), false);
            return -1;
        }

        source.sendFeedback(new LiteralText(key + " -> " + value), false);
        return 1;
    }

}
